{"version":3,"sources":["components/NewMovie/NewMovie.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","App.tsx","index.tsx"],"names":["MovieKeys","MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","onAdd","useState","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","titleError","setTitleError","descriptionError","setDescriptionError","imgUrlError","setImgUrlError","imdbUrlError","setImdbUrlError","imdbIdError","setImdbIdError","handleInputChange","event","target","name","value","Title","Description","ImgUrl","ImdbUrl","ImdbId","handleInputBlur","onSubmit","preventDefault","type","placeholder","onChange","onBlur","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.406b44ee.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nenum MovieKeys {\n  Title = 'title',\n  Description = 'description',\n  ImgUrl = 'imgUrl',\n  ImdbUrl = 'imdbUrl',\n  ImdbId = 'imdbId',\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  /* ---------------Error-inputs---------------- */\n  const [titleError, setTitleError] = useState(false);\n  const [descriptionError, setDescriptionError] = useState(false);\n  const [imgUrlError, setImgUrlError] = useState(false);\n  const [imdbUrlError, setImdbUrlError] = useState(false);\n  const [imdbIdError, setImdbIdError] = useState(false);\n\n  const reset = () => {\n    setTitle('');\n    setDescription('');\n    setImdbId('');\n    setImdbUrl('');\n    setImgUrl('');\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case MovieKeys.Title:\n        setTitle(value);\n        setTitleError(false);\n        break;\n\n      case MovieKeys.Description:\n        setDescription(value);\n        setDescriptionError(false);\n        break;\n\n      case MovieKeys.ImgUrl:\n        setImgUrl(value);\n        setImgUrlError(false);\n        break;\n\n      case MovieKeys.ImdbUrl:\n        setImdbUrl(value);\n        setImdbUrlError(false);\n        break;\n\n      case MovieKeys.ImdbId:\n        setImdbId(value);\n        setImdbIdError(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleInputBlur = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = event.target;\n\n    switch (name) {\n      case MovieKeys.Title:\n        if (!title) {\n          setTitleError(true);\n        }\n\n        break;\n\n      case MovieKeys.Description:\n        if (!title) {\n          setDescriptionError(true);\n        }\n\n        break;\n\n      case MovieKeys.ImgUrl:\n        if (!title) {\n          setImgUrlError(true);\n        }\n\n        break;\n\n      case MovieKeys.ImdbUrl:\n        if (!title) {\n          setImdbUrlError(true);\n        }\n\n        break;\n\n      case MovieKeys.ImdbId:\n        if (!title) {\n          setImdbIdError(true);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleNewMovieSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    reset();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      onSubmit={handleNewMovieSubmit}\n    >\n      <input\n        type=\"text\"\n        data-cy=\"form-title\"\n        placeholder=\"Title\"\n        className=\"NewMovie__input\"\n        name=\"title\"\n        value={title}\n        onChange={handleInputChange}\n        onBlur={handleInputBlur}\n      />\n      {titleError && (\n        <p className=\"NewMovie__empty-input\">Write a title</p>\n      )}\n\n      <input\n        type=\"text\"\n        data-cy=\"form-description\"\n        placeholder=\"Description\"\n        className=\"NewMovie__input\"\n        name=\"description\"\n        value={description}\n        onChange={handleInputChange}\n        onBlur={handleInputBlur}\n      />\n      {descriptionError && (\n        <p className=\"NewMovie__empty-input\">Write a description</p>\n      )}\n\n      <input\n        type=\"url\"\n        data-cy=\"form-imgUrl\"\n        placeholder=\"ImgUrl\"\n        className=\"NewMovie__input\"\n        name=\"imgUrl\"\n        value={imgUrl}\n        onChange={handleInputChange}\n        onBlur={handleInputBlur}\n      />\n      {imgUrlError && (\n        <p className=\"NewMovie__empty-input\">Write a imgUrl</p>\n      )}\n\n      <input\n        type=\"url\"\n        data-cy=\"form-imdbUrl\"\n        placeholder=\"ImdbUrl\"\n        className=\"NewMovie__input\"\n        name=\"imdbUrl\"\n        value={imdbUrl}\n        onChange={handleInputChange}\n        onBlur={handleInputBlur}\n      />\n      {imdbUrlError && (\n        <p className=\"NewMovie__empty-input\">Write a imdbUrl</p>\n      )}\n\n      <input\n        type=\"text\"\n        data-cy=\"form-imdbId\"\n        placeholder=\"ImdbId\"\n        className=\"NewMovie__input\"\n        name=\"imdbId\"\n        value={imdbId}\n        onChange={handleInputChange}\n        onBlur={handleInputBlur}\n      />\n      {imdbIdError && (\n        <p className=\"NewMovie__empty-input\">Write a imdbId</p>\n      )}\n\n      <button\n        disabled={!title || !imgUrl || !imdbUrl || !imdbId}\n        type=\"submit\"\n        data-cy=\"form-submit-button\"\n        className=\"NewMovie__button\"\n      >\n        OnAdd\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie): void => {\n    setMovies([\n      ...movies,\n      movie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}